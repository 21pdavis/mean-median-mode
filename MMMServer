package meanMedianMode;

public class MMMServer {
	public int calculateMean(int[] list) {
		int sum = 0;
		for (int i = 0; i < list.length; i++) {
			sum += list[i];
		}

		return sum / list.length;
	}

	public String calculateMedian(int[] sortedList, int count) {
		String medianString = "";
		
		if(count % 2 == 0) {
			medianString += (sortedList[count / 2 - 1] + sortedList[count / 2]) / 2.0;
		}
		else {
			medianString += sortedList[count / 2];
		}
		
		return medianString;
	}
	
	public String calculateMode(int[] unsortedList, int count) {
		String modeString = "";
		int currentMax = 1, potentialMax = 0, modeCount = 0, existingCount = 0;
		boolean isRepeat = false;
		int[] existingNumbers = new int[25];
		System.out.println(count);
		
		for(int i = 0; i < count; i++) {
			potentialMax = 0;
			for(int j = 0; j < count; j++) {	
				if(unsortedList[j] == unsortedList[i])
					potentialMax++;
			}
			if(potentialMax > currentMax) 
				currentMax = potentialMax;
		}
		
		for(int i = 0; i < count; i++) {
			isRepeat = false;
			modeCount = 0;
			for(int j = 0; j < count; j++) {
				if(unsortedList[j] == unsortedList[i]) {
					modeCount++;
				}
			}
			for(int h = 0; h < existingCount; h++){
				if(unsortedList[i] == existingNumbers[h]){
					isRepeat == true;
				}
			}
			if(modeCount == currentMax && isRepeat == false) {
				modeString += unsortedList[i] + " ";
				existingNumbers[i] = unsortedList[i];
			}
		}
		
		return modeString;
	}
}
